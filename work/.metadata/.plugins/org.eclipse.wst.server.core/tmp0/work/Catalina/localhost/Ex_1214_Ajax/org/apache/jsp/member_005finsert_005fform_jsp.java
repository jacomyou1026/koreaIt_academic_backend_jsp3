/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-01-07 23:29:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class member_005finsert_005fform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("	<!-- httpRequest.js를 현재 jsp에서 사용하기 위한 코드 \r\n");
      out.write("	자바스크립트(js)파일을 참조하는 script영역에는 내부에 어떤 코드도 추가할 수 없다-->\r\n");
      out.write("	<script src=\"js/httpRequest.js\"></script>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("	\r\n");
      out.write("		//아이디 중복여부 체크\r\n");
      out.write("		var b_idCheck = false;\r\n");
      out.write("	\r\n");
      out.write("		function send(f){\r\n");
      out.write("			\r\n");
      out.write("			var id = f.id.value;\r\n");
      out.write("			var pwd = f.pwd.value;\r\n");
      out.write("			\r\n");
      out.write("			if(id == ''){\r\n");
      out.write("				alert(\"아이디는 필수입니다\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//중복체크를 하지 않으면 DB에 값을 넣을 수 없도록 처리\r\n");
      out.write("			if( !b_idCheck ){//b_idCheck == false\r\n");
      out.write("				alert(\"아이디 중복체크를 하세요\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//f.method = \"post\";\r\n");
      out.write("			f.action = \"insert.do\";\r\n");
      out.write("			f.submit();\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//아이디 중복체크를 위한 함수\r\n");
      out.write("		function check_id(){\r\n");
      out.write("			\r\n");
      out.write("			var id = document.getElementById(\"id\").value.trim();\r\n");
      out.write("			\r\n");
      out.write("			if( id == '' ){\r\n");
      out.write("				alert(\"아이디를 입력하세요\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//Ajax( Asynchronous Javascript & XML )\r\n");
      out.write("			// - 비동기 통신\r\n");
      out.write("			// - 자바스크립트를 이용한 백그라운드 통신기술로써 하나의 웹페이지 안에서\r\n");
      out.write("			//   변경사항이 발생한 특정 일부분만 갱신이 가능하도록 하는 기술\r\n");
      out.write("			\r\n");
      out.write("			//id를 Ajax를 통해 서버로(DB로) 전달\r\n");
      out.write("			var url = \"check_id.do\";\r\n");
      out.write("			var param = \"id=\"+id;\r\n");
      out.write("			\r\n");
      out.write("			//js/httpRequest.js를 참조해둔 상태기 때문에 httpRequest.js가 가지고 있는\r\n");
      out.write("			//sendRequest()메서드를 사용할 수 있다\r\n");
      out.write("			sendRequest( url, param, resultFun, \"GET\" );\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function resultFun(){\r\n");
      out.write("			//Ajax를 통해 완료된 결과를 가지고 돌아오는 메서드(콜백메서드)\r\n");
      out.write("			\r\n");
      out.write("			//xhr.readyState\r\n");
      out.write("			//0 : 초기화 오류\r\n");
      out.write("			//1, 2, 3 : 현재 페이지 로드중\r\n");
      out.write("			//4 : 로드완료\r\n");
      out.write("			\r\n");
      out.write("			//xhr.status\r\n");
      out.write("			//404 : 경로없음\r\n");
      out.write("			//500 : 서버, DB오류...\r\n");
      out.write("			//200 : 이상없음!!\r\n");
      out.write("			\r\n");
      out.write("			if( xhr.readyState == 4 && xhr.status == 200){\r\n");
      out.write("			\r\n");
      out.write("				//서블릿에서 돌려준 최종 결과값\r\n");
      out.write("				//data = \"[{'res':'yes'}]\"\r\n");
      out.write("				var data = xhr.responseText;\r\n");
      out.write("				\r\n");
      out.write("				//data변수에 받아온 값은 json모양을 하고 있으나\r\n");
      out.write("				//실제로는 단순 문자열일 뿐이다.\r\n");
      out.write("				var json = eval(data);//data값을 사용가능한 json구조로 변경\r\n");
      out.write("				\r\n");
      out.write("				//json = [{'res':'yes'}]\r\n");
      out.write("				if( json[0].res == 'no' ){\r\n");
      out.write("					alert(\"이미 사용중인 아이디 입니다\");\r\n");
      out.write("					return;\r\n");
      out.write("					\r\n");
      out.write("				}else{\r\n");
      out.write("					alert(\"사용 가능한 아이디 입니다\");\r\n");
      out.write("					b_idCheck = true;\r\n");
      out.write("					\r\n");
      out.write("					//사용 가능한 아이디라면 변경이 불가하도록 읽기전용으로 처리해보자\r\n");
      out.write("					document.getElementById(\"id\").readOnly = true;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<form>\r\n");
      out.write("		<table border=\"1\" align=\"center\">\r\n");
      out.write("			<caption>회원가입</caption>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>아이디</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input name=\"id\" id=\"id\">\r\n");
      out.write("					<input type=\"button\" value=\"중복체크\" onclick=\"check_id();\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>비밀번호</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"password\" name=\"pwd\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>이름</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input name=\"name\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>이메일</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input name=\"email\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>주소</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input name=\"addr\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\" align=\"center\">\r\n");
      out.write("					<input type=\"button\" value=\"가입\" onclick=\"send(this.form);\">\r\n");
      out.write("					\r\n");
      out.write("					<input type=\"button\" value=\"취소\" onclick=\"location.href='list.do'\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
